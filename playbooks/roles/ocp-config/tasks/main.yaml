---
# tasks file for ocp4 config

- name: Setup Squid proxy server
  import_tasks: squid.yaml
  when: setup_squid_proxy


- name: Extract OCP4 tools
  when: release_image_override != ""
  block:
    - name: Set tools directory path
      set_fact:
        tools_dir: "~/ocp4_tools"

    - name: Create tools directory
      file:
        path: "{{ tools_dir }}"
        state: "{{ item }}"
        mode: '0755'
      with_items:
      - directory

    - name: Extract OCP4 tools from release image ( local-registry )
      when: enable_local_registry
      shell: |
        oc adm release extract --tools {{ release_image_override }} --registry-config='{{ ansible_env.HOME }}/.openshift/pull-secret-updated'
      args:
        chdir: "{{ tools_dir }}"

    - name: Extract OCP4 tools from release image
      when: not enable_local_registry
      shell: |
        echo '{{ install_config.pull_secret }}' > pull_secret
        oc adm release extract --tools {{ release_image_override }} --registry-config='pull_secret'
      args:
        chdir: "{{ tools_dir }}"

    - name: Find archive packages
      find:
        paths: "{{ tools_dir }}"
        patterns: "openshift-*.tar.gz"
      register: find_result

    - name: Unarchive OCP4 tool files
      unarchive:
        src: "{{ item.path }}"
        dest: /usr/local/bin
        remote_src: yes
      with_items: "{{ find_result.files }}"

    - name: Remove tools directory
      file:
        path: "{{ tools_dir }}"
        state: "{{ item }}"
        mode: '0755'
      with_items:
      - absent

- name: Skip config if install workdir exist
  stat:
    path: "{{ workdir }}"
  register: dir_status

- meta: end_play
  when: dir_status.stat.exists

- name: Setup openshift workdir
  file:
    path: "{{ workdir }}"
    state: "{{ item }}"
    mode: '0755'
  with_items:
#  - absent
  - directory


- name: Generate install-config.yaml
  template:
    src: ../templates/install-config.yaml.j2
    dest: "{{ workdir }}/install-config.yaml"

- name: backup the install-config.yaml
  copy:
    src: "{{ workdir }}/install-config.yaml"
    dest: "{{ workdir }}/install-config.yaml.back"
    remote_src: yes
    force: yes

- name: Generate manifest files
  shell: "openshift-install create manifests --log-level {{ log_level }}"
  args:
    chdir: "{{ workdir }}"

- name: Remove the machine yaml files
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob:
    - "{{ workdir }}/openshift/99_openshift-cluster-api_master-machines-*.yaml"
    - "{{ workdir }}/openshift/99_openshift-cluster-api_worker-machineset-*.yaml"

- name: Make the control-plane un-schedulable
  lineinfile:
    path: "{{ workdir }}/manifests/cluster-scheduler-02-config.yml"
    regexp: '^(.*)mastersSchedulable: true'
    line: '\1mastersSchedulable: False'
    backrefs: yes

- name: Create Chrony machineconfig files for coreOS
  import_tasks: chrony.yaml
  when: chronyconfig.enabled

- name: Create ignition files
  shell: "OPENSHIFT_INSTALL_RELEASE_IMAGE_OVERRIDE={{ release_image_override }} openshift-install create ignition-configs --log-level {{ log_level }}"
  args:
    chdir: "{{ workdir }}"

- name: Copy update_ignition_bootstrap
  template:
    src: ../files/update_ignition_bootstrap.py
    dest: /tmp/update_ignition_bootstrap.py
    mode: '0755'

- name: Update bootstrap ignition
  shell: "python3 /tmp/update_ignition_bootstrap.py"
  args:
    chdir: "{{ workdir }}"

- name: Host ignition files
  copy:
    src: "{{ item }}"
    dest: /var/www/html/ignition/
    mode: o+r
  with_fileglob:
    - "{{ workdir }}/*.ign"

- name: Best effort SELinux repair - Apache
  shell: "restorecon -vR /var/www/html || true"


